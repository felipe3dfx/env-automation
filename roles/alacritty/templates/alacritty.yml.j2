env:
  TERM: xterm-256color

window:
  decorations: full

font:
  normal:
    family: Iosevka extended
    style: Regular

  bold:
    family: Iosevka extended
    style: Bold

  italic:
    family: Iosevka extended
    style: Italic

  size: 12.0

  use_thin_strokes: true


# Colors (Snazzy)

draw_bold_text_with_bright_colors: true

colors:

  primary:
    background: '#282a36'
    foreground: '#eff0eb'

  cursor:
    cursor: '#97979b'

  selection:
    text:       '#282a36'
    background: '#feffff'

  normal:
    black:   '#282a36'
    red:     '#ff5c57'
    green:   '#5af78e'
    yellow:  '#f3f99d'
    blue:    '#57c7ff'
    magenta: '#ff6ac1'
    cyan:    '#9aedfe'
    white:   '#f1f1f0'

  bright:
    black:   '#686868'
    red:     '#ff5c57'
    green:   '#5af78e'
    yellow:  '#f3f99d'
    blue:    '#57c7ff'
    magenta: '#ff6ac1'
    cyan:    '#9aedfe'
    white:   '#eff0eb'

background_opacity: 0.98

# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - {mouse: Middle, action: PasteSelection}

mouse:
  hide_when_typing: false

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  style: Underline
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true
shell:
  program: /usr/bin/zsh
  args:
    - --login

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 3

  # Automatically scroll to the bottom when new text is written
  # to the terminal.
  # auto_scroll: false

# Send ESC (\x1b) before characters when alt is pressed.
# alt_send_esc: true

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad

key_bindings:
  - { key: N, mods: Command|Shift, action: SpawnNewInstance }

hints:
  enabled:
    - regex: "(magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
      command: xdg-open
      post_processing: true
      mouse:
          enabled: true
          mods: Control
      binding:
          key: U
          mods: Control|Shift
