#---------------------------------------------
# Command history configuration
#---------------------------------------------
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=~/.zsh_history

#---------------------------------------------
# Basic zsh configuration
#---------------------------------------------
CASE_SENSITIVE=false
HYPHEN_INSENSITIVE=false
DISABLE_AUTO_UPDATE=false
DISABLE_LS_COLORS=true
DISABLE_AUTO_TITLE=false
ENABLE_CORRECTION=false
COMPLETION_WAITING_DOTS=true

#---------------------------------------------
# Exports
#---------------------------------------------
export GPG_TTY=$(tty)
export LANG=en_US.UTF-8

export NODE_MODULES_BIN=./node_modules/.bin
export JAVA_HOME={{ JAVA_HOME }}
export CARGO_HOME=~/.cargo
export ZPLUG_HOME={{ ZPLUG_HOME }}
export PATH=$HOME/bin:/usr/local/bin:$PATH:$JAVA_HOME/bin:$GCPATH/bin:$GOPATH/bin:$NODE_MODULES_BIN:$CARGO_HOME/bin:$PATH

if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR="vim"
else
  export EDITOR="nvim"
fi

export SSH_KEY_PATH=~/.ssh/rsa_id

export FZF_BASE={{ FZF_BASE }}
export FZF_DEFAULT_COMMAND="rg --files --hidden"

{% if ansible_distribution != 'MacOSX' %}
export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
{% endif %}

#---------------------------------------------
# Plugins
#---------------------------------------------
export NVM_LAZY_LOAD=true
source $ZPLUG_HOME/init.zsh

zplug "plugins/vi-mode", from:oh-my-zsh
zplug "plugins/fzf", from:oh-my-zsh
zplug "plugins/dotenv", from:oh-my-zsh

zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"

zplug "zsh-users/zsh-syntax-highlighting", defer:2

zplug "mafredri/zsh-async", from:github
zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme
zplug "rupa/z", use:z.sh

zplug "lukechilds/zsh-nvm"

zplug "asdf-vm/asdf", use:asdf.sh

if ! zplug check; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

#---------------------------------------------
# Bindings
#---------------------------------------------
bindkey '^ ' fzf-history-widget

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

#---------------------------------------------
# Aliases
#---------------------------------------------

alias vimdiff="nvim -d"
alias r="source ~/.zshrc"

alias e="$EDITOR"

{% if ansible_distribution == 'MacOSX' %}
alias sed=gsed
{% endif %}

alias cat="batcat --theme 'Monokai Extended Origin'"
alias ls=exa

alias l="ls -1"
alias c="clear"
alias md="mkdir -p"

# Docker
alias docker_clean="docker system prune --all --volumes"

# Git
g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}
compdef g=git

alias ga="git add"
alias gaa="git add --all"
alias gai="git add --interactive"

alias gb="git branch"

alias gc="git commit -v"
alias gca="git commit -v --amend"
alias gcm="git commit -v -m"

alias gc!="git commit --no-verify -v"
alias gca!="git commit --amend --no-verify -v"
alias gcm!="git commit --no-verify -v -m"

alias gct="git checkout"

gcb() {
  if [[ $# > 0 ]]; then
    git checkout $@
  else
    fgcb
  fi
}
alias gcbb="git checkout -b"

alias gcp="git cherry-pick"
alias gcpa="git cherry-pick --abort"
alias gcpc="git cherry-pick --continue"

alias gpr="git pull -r"
alias gl="git log"
alias glm="git log --author='{{ FULLNAME }}'"

alias gp="git push -u origin HEAD"
alias gp!="gp --no-verify"
alias gpf="gp --force-with-lease"
alias gpf!="gp! --force-with-lease"

alias gsh="git show"

alias gs="git stash"
alias gsp="git stash pop"

alias gd="git diff"
alias gds="git diff --staged"

alias gf="git fetch"
alias gfa="git fetch --all"
alias gfo="git fetch origin"

alias gra="git reset ."
alias grh="git reset --hard"

alias gmt="git mergetool"

alias gr="git rebase"
alias gri="git rebase --interactive"
alias grc="git rebase --continue"
alias gra="git rebase --abort"

gbd() { # git delete branch
  git branch -d $@
  git push origin --delete $@
}

gbd!() { # git delete branch force
  git branch -D $@
  git push origin --delete --force $@
}

fgcb() {
  local branches branch
  branches=$(git branch --all | rg -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux --height 40% -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

fkill() {
  local pid
  if [ "$UID" != "0" ]; then
      pid=$(ps -f -u $UID | sed 1d | fzf -m | awk "{print $2}")
  else
      pid=$(ps -ef | sed 1d | fzf -m | awk "{print $2}")
  fi

  if [ "x$pid" != "x" ]
  then
      echo $pid | xargs kill -${1:-9}
  fi
}

tm() {
  tmux attach || tmux new
}

alias tmks="tmux kill-server"

cheat() {
  curl cheat.sh/$@
}

alias hm="man"
alias hc="cheat"

if type "$kubectl" > /dev/null; then
  alias k8s="kubectl"
  compdef k8s=kubectl
fi

alias my_ip="curl ifconfig.me/ip"

# npm / yarn

# search for file recursively up
{% raw %}
upsearch() {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}
{% endraw %}

# fzf_npm_script - opens fzf for npm script
# selection. Prints selected script back
_fzf_npm_script() {
  local npm_script
  npm_script=$(cat ./package.json | jq -r '.scripts | keys | .[]' | fzf)
  echo "$npm_script"
}

_run_npm_script() {
  if [[ ! -f './package.json' ]]; then
    echo "no package.json file!"
    return 0
  fi

  local npm_script
  npm_script=$(_fzf_npm_script)
  if [ -z "$npm_script" ]; then
    return 0
  fi
  echo "$1 run $npm_script"
  "$1" run "$npm_script"
}

_get_npm_client() {
  if [[ $(upsearch 'yarn.lock') ]]; then
    echo 'yarn'
    return 1
  fi

  if [[ $(upsearch 'package-lock.json') ]]; then
    echo 'npm'
    return 1
  fi

  return 0
}

# nr - npm run script
# Opens fzf with list of available scripts
# runs selected script
nr() {
  _run_npm_script $(_get_npm_client)
}

npm_uninstall_globals() {
  npm ls -gp --depth=0 | awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' | xargs npm -g rm
}

# Docker

alias dps="docker ps"

alias ..='cd ..'
alias ....='cd ../../'

# Fzf roles select

run_ansible_role() {
  local role
  role=$(l ./roles | fzf)
  make install-only tags="$role"
}

ar() {
  run_ansible_role
}

alias serve='browser-sync start -s -f . --no-notify --host $LOCAL_IP --port 9000'

#---------------------------------------------
# Color scheme
#---------------------------------------------
setopt PROMPT_SUBST

RUNO_ARROW_ICON=${RUNO_ARROW_ICON:-âžœ }

PROMPT="%(?:%F{green}:%F{red})"
PROMPT+='${RUNO_ARROW_ICON}'
PROMPT+="%F{red}%B%c "
PROMPT+='%f%b'

# export EXA_COLORS="di=35"

# Monokai
export FZF_DEFAULT_OPTS='
  --reverse
  --color fg:#F8F8F2,bg:#272822,hl:67,fg+:252,bg+:235,hl+:81
  --color info:144,prompt:161,spinner:135,pointer:135,marker:118
'

export FZF_PREVIEW_COMMAND='batcat --theme Monokai Extended Origin {}'
