#---------------------------------------------
# Command history configuration
#---------------------------------------------
HISTSIZE=50000
SAVEHIST=50000
HISTFILE=~/.zsh_history

#---------------------------------------------
# Basic zsh configuration
#---------------------------------------------
CASE_SENSITIVE=false
HYPHEN_INSENSITIVE=false
DISABLE_AUTO_UPDATE=false
DISABLE_LS_COLORS=true
DISABLE_AUTO_TITLE=false
ENABLE_CORRECTION=false
COMPLETION_WAITING_DOTS=true
ZSH_DOTENV_PROMPT=false

setopt ignore_eof # don't exit on ctrl-d
setopt share_history # share history between zsh sessions

#---------------------------------------------
# Exports
#---------------------------------------------
export GPG_TTY=$(tty)
export LANG=en_US.UTF-8
export PIPENV_VENV_IN_PROJECT=1

export PIPENV_VENV_IN_PROJECT=true

export NODE_MODULES_BIN=./node_modules/.bin
export JAVA_HOME={{ JAVA_HOME }}
export CARGO_HOME=~/.cargo
export ZPLUG_HOME={{ ZPLUG_HOME }}
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH:$JAVA_HOME/bin:$NODE_MODULES_BIN:$CARGO_HOME/bin:$PATH

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    alias nvim=nvr -cc split --remote-wait +'set bufhidden=wipe'
fi

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    export VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
elif [[ -n $SSH_CONNECTION ]]; then
  export EDITOR="vim"
  export EDITOR="vim"
else
  export VISUAL="nvim"
  export EDITOR="nvim"
fi

export SSH_KEY_PATH=~/.ssh/rsa_id

export FZF_BASE={{ FZF_BASE }}
export FZF_DEFAULT_COMMAND="rg --files --hidden"

{% if ansible_distribution != 'MacOSX' %}
export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
{% endif %}

#---------------------------------------------
# Plugins
#---------------------------------------------
export NVM_LAZY_LOAD=false
source $ZPLUG_HOME/init.zsh

zplug 'zplug/zplug', hook-build:'zplug --self-manage'
zplug "plugins/vi-mode", from:oh-my-zsh
zplug "plugins/fzf", from:oh-my-zsh
zplug "plugins/dotenv", from:oh-my-zsh
zplug "plugins/git",   from:oh-my-zsh

zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"

zplug "zsh-users/zsh-syntax-highlighting", defer:2

zplug "mafredri/zsh-async", from:github
zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme
zplug "rupa/z", use:z.sh

zplug "lukechilds/zsh-nvm"
zplug "Aloxaf/fzf-tab"

if ! zplug check; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load

enable-fzf-tab

#---------------------------------------------
# Bindings
#---------------------------------------------
bindkey '^ ' fzf-history-widget
bindkey '^F' fzf-file-widget

bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

#---------------------------------------------
# Aliases
#---------------------------------------------

alias vimdiff="nvim -d"
alias r="source ~/.zshrc"

alias e="$EDITOR"

{% if ansible_distribution == 'MacOSX' %}
alias sed=gsed
{% endif %}

alias cat="batcat --theme 'Monokai Extended Origin'"
alias ls=exa

alias l="ls -1"
alias c="clear"
alias md="mkdir -p"

# Docker
alias docker_clean="docker system prune --all --volumes"

fkill() {
  local pid
  if [ "$UID" != "0" ]; then
      pid=$(ps -f -u $UID | sed 1d | fzf -m | awk "{print $2}")
  else
      pid=$(ps -ef | sed 1d | fzf -m | awk "{print $2}")
  fi

  if [ "x$pid" != "x" ]
  then
      echo $pid | xargs kill -${1:-9}
  fi
}

tm() {
  tmux attach || tmux new
}

alias tmks="tmux kill-server"

cheat() {
  curl cheat.sh/$@
}

if type "$kubectl" > /dev/null; then
  alias k8s="kubectl"
  compdef k8s=kubectl
fi

alias my_ip="curl ifconfig.me/ip"

# npm / yarn

# search for file recursively up
{% raw %}
upsearch() {
  slashes=${PWD//[^\/]/}
  directory="$PWD"
  for (( n=${#slashes}; n>0; --n ))
  do
    test -e "$directory/$1" && echo "$directory/$1" && return
    directory="$directory/.."
  done
}
{% endraw %}

# fzf_npm_script - opens fzf for npm script
# selection. Prints selected script back
_fzf_npm_script() {
  if [[ ! -f './package.json' ]]; then
    echo "no package.json file!"
    return 0
  fi

  local npm_script
  npm_script=$(cat ./package.json | jq -r '.scripts | keys | .[]' | fzf)
  echo "$npm_script"
}

_get_npm_client() {
  if [[ $(upsearch 'yarn.lock') ]]; then
    echo 'yarn'
    return 1
  fi

  if [[ $(upsearch 'package-lock.json') ]]; then
    echo 'npm'
    return 1
  fi

  return 0
}

# nr - npm run script
# Opens fzf with list of available scripts
# runs selected script
nr() {
  local npm_client
  npm_client=$(_get_npm_client)
  if [ -z "$npm_client" ]; then
    echo "no package-lock.json or yarn.lock"
    return 0
  fi

  local npm_script
  npm_script=$(_fzf_npm_script)
  if [ -z "$npm_script" ]; then
    return 0
  fi
  echo "$npm_client run $npm_script"
  "$npm_client" run "$npm_script"
}

ni() {
  local npm_client
  npm_client=$(_get_npm_client)
  if [ -z "$npm_client" ]; then
    echo "no package-lock.json or yarn.lock"
    return 0
  fi

  echo "$npm_client" install
  "$npm_client" install
}

npm_uninstall_globals() {
  npm ls -gp --depth=0 | awk -F/ '/node_modules/ && !/\/npm$/ {print $NF}' | xargs npm -g rm
}

# Docker

alias dps="docker ps"

alias ..='cd ..'
alias ....='cd ../../'

# Fzf roles select

run_ansible_role() {
  local role
  role=$(l ./roles | fzf)
  make install-only tags="$role"
}

ar() {
  run_ansible_role
}

alias uuid='uuidgen'
alias cargo_installed='cargo install --list'
